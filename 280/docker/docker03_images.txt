思考：容器里的进程看到的文件系统又是什么样子的呢？
    即使开启了mount namespace，容器进程看到的文件系统也跟宿主机完全一样
    mount namespace修改的，是容器进程对文件系统“挂载点”的认知。
    mount namespace与其他namespace使用略有不同的地方：他对容器进程视图的改变，一定是伴随着挂载操作才能生效
    我们可以在容器进程启动之前重新挂载他的整个目录/。
    chroot：change root system，改变进程的根目录到你指定的位置
    例子：
        mkdir /root/test
        mkdir -p /root/test/{bin,lib64,lib}
        cp -v /bin/{bash,ls} /root/test/bin
        list=`ldd /bin/ls | egrep -o '/lib.*\.[0-9]'`
        for i in $list
        do
          cp -v $i /root/test/$i
        done
        chroot /root/test /bin/bash

1. 而这个挂载在容器根目录上、用来为容器进程提供隔离后执行环境的文件系统，就是所谓的“容器镜像”。即rootfs（根文件系统）
2. docker最核心的原理实际上就是为待创建的用户进程：
    1.启用linux namespace配置
    2.设置指定的cgroups参数
    3.切换进程的根目录chroot
3. rootfs 只是一个操作系统所包含的文件、配置和目录，并不包括操作系统内核。在linux操作系统中，这两部分是分开存放的，操作系统只有在开机启动时才会加载指定版本的内核镜像。
4. 一致性：
    rootfs里打包了应用，操作系统的文件和目录。
    mount namespace 正是基于对chroot的不断改良才被发明出来的，它也是linux操作系统里的第一个namespace
    这种深入到操作系统级别的运行环境一致性，打通了应用在本地开发和远端执行环境之间难以逾越的鸿沟



















